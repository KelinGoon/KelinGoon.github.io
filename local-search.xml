<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>整理常见的Go语言基础</title>
    <link href="/2024/07/28/%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/07/28/%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="整理面试中常见的Go语言基础"><a href="#整理面试中常见的Go语言基础" class="headerlink" title="整理面试中常见的Go语言基础"></a>整理面试中常见的Go语言基础</h1><h2 id="一、Go语言中的错误处理——recover和panic"><a href="#一、Go语言中的错误处理——recover和panic" class="headerlink" title="一、Go语言中的错误处理——recover和panic"></a>一、Go语言中的错误处理——recover和panic</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>panic</strong> 与 <strong>recover</strong> 是 Go 的两个内置函数，这两个内置函数用于处理 Go 运行时的错误，panic 用于主动抛出错误，recover 用来捕获 panic 抛出的错误。<br></p><p>当发生运行时异常时，程序会出现panic，造成严重的线上事故，使用recover可以避免这种严重的线上事务。</p><p><img src="/2024/07/28/%E6%95%B4%E7%90%86%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/image.png" alt="图片1"></p><p>panic发生时会依次执行：<br><br>1、逆序执行当前goroutine的defer链（recover从这里介入）<br><br>2、打印错误信息和调用堆栈<br><br>3、调用exit(2)结束整个进程<br></p><p>不使用recover时panic就会直接执行到第三点，退出程序<br><br>使用recover后，panic会直接介入到recover，而不会直接退出程序</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入学习Go语言：数据结构-切片</title>
    <link href="/2024/07/28/learn-go-map/"/>
    <url>/2024/07/28/learn-go-map/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入学习Go语言：数据结构-切片</title>
    <link href="/2024/07/27/learn_go_slice/"/>
    <url>/2024/07/27/learn_go_slice/</url>
    
    <content type="html"><![CDATA[<h1 id="深入学习Go语言的切片"><a href="#深入学习Go语言的切片" class="headerlink" title="深入学习Go语言的切片"></a>深入学习Go语言的切片</h1><p>在go语言的实际开发中，我们使用更多的是切片而不是数组，数组的固定长度注定了只能在一些特殊的场景下才更具优势。</p><p>切片就像go语言内置的“动态数组”，与数组相比切片的长度往往是固定的，可以追加元素，在追加时可以使切片的容量增大。</p><p><strong>今天我们主要学习探讨的是切片函数传值、切片动态扩容、切片对底层数组的引用等问题</strong></p><h2 id="一、什么是切片？"><a href="#一、什么是切片？" class="headerlink" title="一、什么是切片？"></a>一、什么是切片？</h2><ol><li><p>在Go语言中，<strong>切片</strong>（slice）是对数组的一个抽象。切片比数组更灵活、功能更强大，是Go语言中非常常用的数据结构。切片本质上是一个指向数组的引用，因此它是引用类型。</p><br></li><li><p>你可以声明一个未指定大小的数组来定义<strong>切片</strong>：</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> identifier []<span class="hljs-keyword">type</span><br></code></pre></td></tr></table></figure><p>切片有两个重要的参数：长度、容量</p><p>使用 make() 函数来创建切片:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> slice1 []<span class="hljs-keyword">type</span> = <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">type</span>, <span class="hljs-built_in">len</span>, capacity)<br><br>也可以简写为<br><br>slice1 := <span class="hljs-built_in">make</span>([]T, length, capacity)<br></code></pre></td></tr></table></figure><h2 id="二、切片的底层原理？"><a href="#二、切片的底层原理？" class="headerlink" title="二、切片的底层原理？"></a>二、切片的底层原理？</h2><h3 id="切片的函数传值"><a href="#切片的函数传值" class="headerlink" title="切片的函数传值"></a>切片的函数传值</h3><p>有一天我水群的时候看到群友遇到了一个问题：</p><p>问：这段代码中，容量为5，长度为0，append一个元素，明显不会触发扩容，为什么结果却没有修改切片呢</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>slice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><br>ap(slice)<br>fmt.Println(slice)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ap</span><span class="hljs-params">(slice []<span class="hljs-type">int</span>)</span></span> &#123;<br>slice = <span class="hljs-built_in">append</span>(slice, <span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>总所周知切片作为一种数据类型，作为值在函数中传递时是值传递，实际上在go语言中所有的类型传递都是值传递，而不是引用传递。</p><p>但是就算是值传递，切片副本与原切片指向的底层数组是相同的。在副本中append，底层数组的长度从0变成1，但是原切片的长度是0，因此虽然底层数组改变了但原切片也看不到只能显示[]</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>slice := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><br>ap(slice)  <br>fmt.Println(slice) <span class="hljs-comment">// []</span><br>    slice.<span class="hljs-built_in">len</span> = <span class="hljs-number">1</span>      <span class="hljs-comment">// 假如可以更改len属性的话</span><br>    fmt.Println(slice) <span class="hljs-comment">// [1]</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ap</span><span class="hljs-params">(slice []<span class="hljs-type">int</span>)</span></span> &#123;<br>slice = <span class="hljs-built_in">append</span>(slice, <span class="hljs-number">1</span>) <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、切片面试题"><a href="#三、切片面试题" class="headerlink" title="三、切片面试题"></a>三、切片面试题</h2><h3 id="一、打印结果"><a href="#一、打印结果" class="headerlink" title="一、打印结果"></a>一、打印结果</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;<br>s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">7</span>)<br><br>x := <span class="hljs-built_in">append</span>(s, <span class="hljs-number">8</span>)<br>y := <span class="hljs-built_in">append</span>(s, <span class="hljs-number">9</span>)<br><br>fmt.Println(<span class="hljs-string">&quot;t:&quot;</span>, s, x, y)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、打印结果"><a href="#二、打印结果" class="headerlink" title="二、打印结果"></a>二、打印结果</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test5</span><span class="hljs-params">()</span></span> &#123;<br>    a := []<span class="hljs-type">byte</span>(<span class="hljs-string">&quot;AAAA/BBBBB&quot;</span>)<br>    index := bytes.IndexByte(a, <span class="hljs-string">&#x27;/&#x27;</span>)<br>    b := a[:index]<br>    c := a[index+<span class="hljs-number">1</span>:]<br>    b = <span class="hljs-built_in">append</span>(b, <span class="hljs-string">&quot;CCC&quot;</span>...)<br>    fmt.Println(<span class="hljs-string">&quot;test5:&quot;</span>, <span class="hljs-type">string</span>(a))<br>    fmt.Println(<span class="hljs-string">&quot;test5:&quot;</span>, <span class="hljs-type">string</span>(b))<br>    fmt.Println(<span class="hljs-string">&quot;test5:&quot;</span>, <span class="hljs-type">string</span>(c))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、打印结果"><a href="#三、打印结果" class="headerlink" title="三、打印结果"></a>三、打印结果</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">s0</span><span class="hljs-params">()</span></span> &#123;<br>    s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>    x := s[:<span class="hljs-number">1</span>]<br>    y := s[<span class="hljs-number">2</span>:]<br><br>    x = <span class="hljs-built_in">append</span>(x, y...)<br>    x = <span class="hljs-built_in">append</span>(x, y...)<br><br>    fmt.Println(<span class="hljs-string">&quot;s0: s=&quot;</span>, s, <span class="hljs-string">&quot;   x=&quot;</span>, x)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客部署</title>
    <link href="/2024/07/27/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/07/27/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用GitHub-Pages-Hexo搭建个人博客网站"><a href="#使用GitHub-Pages-Hexo搭建个人博客网站" class="headerlink" title="使用GitHub Pages + Hexo搭建个人博客网站"></a>使用GitHub Pages + Hexo搭建个人博客网站</h1><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><ol><li><p><strong>GitHub账号</strong><br>需要有一个GitHub账号，没有的话到 <a href="https://github.com/">官网</a> 申请一个。注册很简单，不懂的话可以参考 <a href="https://github.com/join">GitHub申请账号</a>。</p></li><li><p><strong>安装Git</strong><br>在自己电脑上安装好Git，Hexo部署到GitHub时要用。网上找篇教程或者参考 <a href="https://git-scm.com/book/zh/v2">Git安装(Windows)</a>。</p></li><li><p><strong>安装NodeJS</strong><br>在自己电脑上安装好NodeJS，Hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具。网上找篇教程或者参考 <a href="https://nodejs.org/zh-cn/">NodeJS安装及配置(Windows)</a>。</p></li></ol><h2 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h2><p>在GitHub上创建一个新的代码仓库用于保存我们的网页。</p><ol><li><p>点击<code>Your repositories</code>，进入仓库页面。</p></li><li><p>点击<code>New</code>按钮，进入仓库创建页面。</p></li><li><p>填写仓库名，格式必须为&lt;用户名&gt;.github.io，然后点击<code>Create repository</code>。</p></li><li><p>点击<code>creating a new file</code>创建一个新文件，作为我们网站的主页。</p></li><li><p>新文件的名字必须为<code>index.html</code>，内容先随便写一个简单的，内容示例如下，填写之后点击<code>Commit new file</code>提交。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>yaorongke<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>yaorongke的个人主页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p>GitHub Pages中找到我们主页的地址为 <code>https://&lt;用户名&gt;.github.io/</code></p><p>浏览器中访问，展示成功。</p><p>这里创建的网页是非常简陋的，只是为了演示下GitHub Pages的使用方式。</p><h2 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h2><p>我们采用Hexo来创建我们的博客网站，Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。点击进入 <a href="https://hexo.io/">官网</a>。</p><ol><li><p><strong>安装 Hexo</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install -g hexo-cli<br></code></pre></td></tr></table></figure></li><li><p><strong>查看版本</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo -v<br></code></pre></td></tr></table></figure></li><li><p><strong>创建一个项目 hexo-blog 并初始化</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo init hexo-blog<br><span class="hljs-built_in">cd</span> hexo-blog<br>npm install<br></code></pre></td></tr></table></figure></li><li><p><strong>本地启动</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g<br>hexo server<br></code></pre></td></tr></table></figure></li></ol><p>浏览器访问 <code>http://localhost:4000</code>，页面默认主图风格如下。</p><h2 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a>四、更换主题</h2><p>Hexo 默认的主题不太好看，不过官方提供了数百种主题供用户选择，可以根据个人喜好更换，<a href="https://hexo.io/themes/">官网主题</a>。</p><p>这里介绍两个主题的使用方法，Next 和 Fluid，个人比较喜欢Fluid，后面章节的功能也是以 Fluid 为基础进行讲解的。</p><h3 id="1-NexT-主题"><a href="#1-NexT-主题" class="headerlink" title="1. NexT 主题"></a>1. NexT 主题</h3><p><strong>安装主题</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> hexo-blog<br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><h2 id="使用-NexT-主题"><a href="#使用-NexT-主题" class="headerlink" title="使用 NexT 主题"></a>使用 NexT 主题</h2><ol><li><p><strong>安装主题</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> hexo-blog<br>git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure></li><li><p><strong>使用 NexT 主题</strong></p><p> 打开 <code>_config.yml</code> 文件，该文件为站点配置文件。</p><p> 将主题修改为 <code>next</code>：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br></code></pre></td></tr></table></figure></li><li><p><strong>本地启动</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-Fluid主题"><a href="#2-Fluid主题" class="headerlink" title="2. Fluid主题"></a>2. Fluid主题</h2><p>以下安装步骤摘自 <a href="https://hexo.fluid-dev.com/">Fluid官网</a></p><ol><li><p><strong>安装主题</strong></p><p> 下载最新 release 版本解压到 <code>themes</code> 目录，并将解压出的文件夹重命名为 <code>fluid</code>。</p></li><li><p><strong>指定主题</strong></p><p> 修改 Hexo 博客目录中的 <code>_config.yml</code>：</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment"># 指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment"># 指定语言，会影响主题显示的语言，按需修改</span><br></code></pre></td></tr></table></figure></li><li><p><strong>创建「关于页」</strong></p><p> 首次使用主题的「关于页」需要手动创建：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo new page about<br></code></pre></td></tr></table></figure><p> 创建成功后，编辑博客目录下 <code>/source/about/index.md</code>，添加 <code>layout</code> 属性。</p><p> 修改后的文件示例如下：</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: about<br>date: 2020-02-23 19:20:33<br><span class="hljs-section">layout: about</span><br><span class="hljs-section">---</span><br><br>这里写关于页的正文，支持 Markdown, HTML<br></code></pre></td></tr></table></figure></li><li><p><strong>本地启动</strong></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">hexo g -d<br>hexo s<br></code></pre></td></tr></table></figure><p> 浏览器访问 <code>http://localhost:4000</code>，Fluid主题风格页面如下。</p></li></ol><h2 id="五、创建文章"><a href="#五、创建文章" class="headerlink" title="五、创建文章"></a>五、创建文章</h2><p>修改 Hexo 博客目录中的 <code>_config.yml</code>，打开这个配置是为了在生成文章的时候生成一个同名的资源目录用于存放图片文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>执行如下命令创建一篇新文章，名为《测试文章》：</p><p>hexo new post 测试文章</p><p>执行完成后在 <code>source/_posts</code> 目录下生成了一个 <code>md</code> 文件和一个同名的资源目录（用于存放图片）。</p><p>在资源目录 <code>测试文章</code> 中放一张图片 <code>test.png</code>。</p><p>在 <code>测试文章.md</code> 中添加内容如下，演示了图片的三种引用方式。第一种为官方推荐用法，第二种为 Markdown 语法，第三种和前两种图片存放位置不一样，是将图片放在 <code>source/images</code> 目录下。这三种写法在 <code>md</code> 文件中图片是无法显示的，但是在页面上能正常显示。</p><p>图片的引入方式可参考官方文档 <a href="https://hexo.io/zh-cn/docs/asset-folders.html%EF%BC%8C%E6%9C%89%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E3%80%82">https://hexo.io/zh-cn/docs/asset-folders.html，有详细介绍。</a></p><hr><p>title: 测试文章<br>date: 2021-06-10 16:35:20<br>tags:</p><ul><li>原创<br>categories:</li><li>Java</li></ul><hr><p>这是一篇测试文章</p><p><img src="/2024/07/27/%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/test.png" alt="图片引用方法二"></p><p><img src="/images/test.png" alt="图片引用方法三"></p><p>本地启动</p><p>hexo g -d<br>hexo s</p><h2 id="六、个性化页面展示"><a href="#六、个性化页面展示" class="headerlink" title="六、个性化页面展示"></a>六、个性化页面展示</h2><p>页面的标题等位置显示默认的文字，可以改下显示一些个性化的信息。</p><ol><li><strong>浏览器tab页名称</strong> 修改根目录下 <code>_config.yml</code> 中的 <code>title</code> 字段。</li><li><strong>博客标题</strong> 主题目录 <code>themes/fluid</code> 下 <code>_config.yml</code> 中的 <code>blog_title</code> 字段。</li><li><strong>主页正中间的文字</strong> 主题目录 <code>themes/fluid</code> 下 <code>_config.yml</code> 中的 <code>text</code> 字段。</li></ol><p>修改好配置后，页面效果如下，可以看到现在显示的内容变成了我们的个人信息。</p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打包python的方法</title>
    <link href="/2023/07/13/%E6%89%93%E5%8C%85python%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/07/13/%E6%89%93%E5%8C%85python%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="本文主要记录pyinstaller的打包方式"><a href="#本文主要记录pyinstaller的打包方式" class="headerlink" title="本文主要记录pyinstaller的打包方式"></a>本文主要记录pyinstaller的打包方式</h2><h3 id="安装pyinstaller"><a href="#安装pyinstaller" class="headerlink" title="安装pyinstaller"></a>安装pyinstaller</h3><p>命令如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">pip install pyinstaller<br></code></pre></td></tr></table></figure><h4 id="使用pyinstaller进行打包"><a href="#使用pyinstaller进行打包" class="headerlink" title="使用pyinstaller进行打包"></a>使用pyinstaller进行打包</h4><p>pyinstaller 最重要的两个参数就是 -F 与 -D 参数。</p><p>使用 - F 参数， pyinstaller 会将 python 程序打包成单个可执行文件。</p><p>使用 - D 参数， pyinstaller 会将 python 程序打包成一个文件夹，运行程序时，需要进入该文件夹，点击运行相应的可执行程序。</p><p>为了美观，还可以通过 - i 参数指定打包程序的图标 (icon)，但这个命令只能在 Windows 平台下生效，此外还可以使用 - n 参数指定生成打包文件的名称。</p><p>如果你使用了 PyQt5 或 tkinter 开发了界面，通常不会希望程序运行时弹出 cmd 命令行，此时就可以使用 - w 参数。</p><p>简单总结一下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-F：打包 Python 程序为单个可执行文件</span><br><br><span class="hljs-deletion">-D：打包 Python 程序为一个文件夹</span><br><br><span class="hljs-deletion">-i：生成图标，只适用于 Windows 平台</span><br><br><span class="hljs-deletion">-n：指定打包后生成文件的名称</span><br><br><span class="hljs-deletion">-w：禁止命令行弹出</span><br></code></pre></td></tr></table></figure><p>使用命令打包文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">pyinstaller -F <span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.py</span><br></code></pre></td></tr></table></figure><h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><p>用命令行cd到python程序的更目录打包</p><p>在dist文件下查找exe文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决vue 使用 lang=&quot;scss&quot; 报错问题</title>
    <link href="/2023/07/11/hello/"/>
    <url>/2023/07/11/hello/</url>
    
    <content type="html"><![CDATA[<h2 id="错误现象"><a href="#错误现象" class="headerlink" title="错误现象 :"></a>错误现象 :</h2><p>主要是node-sass版本问题，他的版本看和node版本对应</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> ERR! code ELIFECYCLE<br><span class="hljs-attribute">npm</span> ERR! errno <span class="hljs-number">1</span><br><span class="hljs-attribute">npm</span> ERR! node-sass@<span class="hljs-number">4</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> postinstall: node scripts/build.js<br><span class="hljs-attribute">npm</span> ERR! Exit status <span class="hljs-number">1</span><br><span class="hljs-attribute">npm</span> ERR!<br><span class="hljs-attribute">npm</span> ERR! Failed at the node-sass@<span class="hljs-number">4</span>.<span class="hljs-number">13</span>.<span class="hljs-number">1</span> postinstall script.<br><span class="hljs-attribute">npm</span> ERR! This is probably not a problem with npm. There is likely additional logging output above.<br><span class="hljs-attribute">npm</span> ERR! A complete log of this run can be found in:<br><span class="hljs-attribute">npm</span> ERR! C:\Users\cpucode\AppData\Roaming\npm-cache_logs\<span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">10</span>T13_48_01_433Z-debug.log<br></code></pre></td></tr></table></figure><p><img src="/2023/07/11/hello/20210610220830132.png" alt="img"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案 :"></a>解决方案 :</h2><p>使用对应的版本</p><p><a href="https://hub.fastgit.org/sass/node-sass">https://hub.fastgit.org/sass/node-sass</a></p><p>都可以看到node和node-sass对应的版本信息</p><p><img src="/2023/07/11/hello/20210610220101374.png" alt="在这里插入图片描述"></p><p>查看版本</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">node</span> <span class="hljs-title">-v</span><br></code></pre></td></tr></table></figure><p><img src="/2023/07/11/hello/2021061022021281.png" alt="在这里插入图片描述"></p><p>与 4.14 对应</p><h2 id="卸载残留问题"><a href="#卸载残留问题" class="headerlink" title="卸载残留问题"></a>卸载残留问题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">先清依赖残留，否则安装不上<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm rebuild <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span><br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm uninstall <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span><br></code></pre></td></tr></table></figure><p>安装 4.14的</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm install  <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span><br></code></pre></td></tr></table></figure><h2 id="解决npm-install报错"><a href="#解决npm-install报错" class="headerlink" title="解决npm install报错"></a>解决npm install报错</h2><p><a href="mailto:&#x6e;&#x6f;&#x64;&#101;&#x2d;&#115;&#97;&#x73;&#x73;&#x40;&#x34;&#46;&#49;&#52;&#x2e;&#x31;">&#x6e;&#x6f;&#x64;&#101;&#x2d;&#115;&#97;&#x73;&#x73;&#x40;&#x34;&#46;&#49;&#52;&#x2e;&#x31;</a> postinstall: <code>node scripts/build.js</code>的问题</p><p>npm install 时报错如下图</p><img src="/2023/07/11/hello/07/11/hello/20201021154850826.png" class title="报错"><p>一开始看Error信息：<br>Error: Can’t find Python executable “python”, you can set the PYTHON env variable.<br>没有python，太奇怪了，然后找了各种方法也没有解决</p><p>后来看可能还是因为node-sass报错：<br><a href="mailto:&#x6e;&#x6f;&#x64;&#x65;&#x2d;&#x73;&#97;&#x73;&#115;&#64;&#x34;&#x2e;&#49;&#52;&#x2e;&#49;">&#x6e;&#x6f;&#x64;&#x65;&#x2d;&#x73;&#97;&#x73;&#115;&#64;&#x34;&#x2e;&#49;&#52;&#x2e;&#49;</a> postinstall: node scripts&#x2F;build.js</p><h4 id="然后找到一个办法："><a href="#然后找到一个办法：" class="headerlink" title="然后找到一个办法："></a>然后找到一个办法：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-built_in">set</span> <span class="hljs-attribute">sass_binary_site</span>=https://npm.taobao.org/mirrors/node-sass<br></code></pre></td></tr></table></figure><h4 id="然后重新install"><a href="#然后重新install" class="headerlink" title="然后重新install"></a>然后重新install</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">npm install  <span class="hljs-keyword">node</span><span class="hljs-title">-sass</span>@<span class="hljs-number">4.14</span><br></code></pre></td></tr></table></figure><h2 id="启动项目："><a href="#启动项目：" class="headerlink" title="启动项目："></a>启动项目：</h2><p>安装其他依赖：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>启动项目：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-built_in">run</span> dev<br></code></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://blog.csdn.net/zhao97/article/details/109203025">(2条消息) npm install报错node-sass@4.14.1 postinstall: <code>node scripts/build.js</code>_～倩的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_44226094/article/details/117792206">(2条消息) npm install node-sass 报错问题的解决方案_cpuCode的博客-CSDN博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实参和形参有什么区别</title>
    <link href="/2023/06/29/%E5%AE%9E%E5%8F%82%E5%92%8C%E5%BD%A2%E5%8F%82%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/06/29/%E5%AE%9E%E5%8F%82%E5%92%8C%E5%BD%A2%E5%8F%82%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>实参（actual argument）和形参（formal parameter）是在函数调用中使用的术语，它们有以下区别：</p><ol><li>形参：形参是在函数定义时声明的参数，用于表示函数可以接收的输入值的占位符。形参是函数定义的一部分，用于描述函数的接口和参数类型。它们通常位于函数的括号内，并指定参数的名称和类型。形参在函数定义时并不具有具体的值。</li><li>实参：实参是在函数调用时提供的具体值或表达式，用于传递给函数的参数。实参是根据函数定义的形参列表提供的具体值或变量。在函数调用时，实参的值将被传递给对应的形参，以便函数内部可以使用这些值进行计算和处理。</li></ol><p>简而言之，形参是函数定义时的参数声明，用于描述函数的接口和参数类型；而实参是在函数调用时提供的具体值，用于传递给函数的参数。<br>下面是一个示例，说明形参和实参的区别：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">goCopy <span class="hljs-selector-tag">code</span><br>func add(<span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> int) int &#123;  // <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> 是形参<br>    return <span class="hljs-selector-tag">a</span> + <span class="hljs-selector-tag">b</span><br>&#125;<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br>    result := <span class="hljs-built_in">add</span>(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)  // <span class="hljs-number">10</span>, <span class="hljs-number">20</span> 是实参<br>    fmt.<span class="hljs-built_in">Println</span>(result)<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的示例中，<strong>add</strong> 函数定义了两个形参 <strong>a</strong> 和 <strong>b</strong>，用于表示两个整数相加。在 <strong>main</strong> 函数中，调用 <strong>add</strong> 函数时提供了实参 <strong>10</strong> 和 <strong>20</strong>，它们将被传递给 <strong>add</strong> 函数的形参 <strong>a</strong> 和 <strong>b</strong>，并计算结果返回。</p>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决hexo博文图片不显示的方法</title>
    <link href="/2023/06/17/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2023/06/17/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">配置参考：<br><span class="hljs-symbol">hexo:</span> <span class="hljs-number">6.3</span><span class="hljs-number">.0</span><br>hexo-<span class="hljs-keyword">cli</span>: <span class="hljs-number">4.3</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">node:</span> <span class="hljs-number">14.17</span><span class="hljs-number">.6</span><br></code></pre></td></tr></table></figure><h3 id="先说一下Hexo在博客中插入图片的教程"><a href="#先说一下Hexo在博客中插入图片的教程" class="headerlink" title="先说一下Hexo在博客中插入图片的教程"></a>先说一下Hexo在博客中插入图片的教程</h3><h5 id="【第一步】确保-博客根目录的-config-yml-中-post-asset-folder-true"><a href="#【第一步】确保-博客根目录的-config-yml-中-post-asset-folder-true" class="headerlink" title="【第一步】确保 博客根目录的_config.yml 中 post_asset_folder: true"></a>【第一步】确保 博客根目录的<code>_config.yml</code> 中 <code>post_asset_folder: true</code></h5><p>这个配置的意思是每次new post一个博客，会增加一个和博客同名的文件夹。</p><p><img src="/2023/06/17/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/show1.jpg" alt="图片1"></p><h5 id="【第二步】在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。"><a href="#【第二步】在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。" class="headerlink" title="【第二步】在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。"></a>【第二步】在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/CodeFalling/</span>hexo-asset-image --save<br></code></pre></td></tr></table></figure><h5 id="【第三步】图片描述"><a href="#【第三步】图片描述" class="headerlink" title="【第三步】图片描述"></a>【第三步】图片描述</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">!<span class="hljs-selector-attr">[图片描述]</span>（包名/NO.<span class="hljs-number">01.001</span><span class="hljs-selector-class">.jpg</span>）<br>示例：!<span class="hljs-selector-attr">[]</span>(解决hexo博文图片不显示的方法/show1<span class="hljs-selector-class">.jpg</span>)<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/2023/06/17/%E8%A7%A3%E5%86%B3hexo%E5%8D%9A%E6%96%87%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E6%96%B9%E6%B3%95/show2.jpg" alt="图片2"></p><p>添加成功</p><h3 id="图片不显示的解决办法"><a href="#图片不显示的解决办法" class="headerlink" title="图片不显示的解决办法"></a>图片不显示的解决办法</h3><p>也是我遇到的</p><p><a href="https://so.csdn.net/so/search?q=hexo&spm=1001.2101.3001.7020">hexo</a>-asset-image的版本一定要下载我上面给出的版本，我因为版本不对，困惑了3天才得到解决</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">我之前下的版本是：<br>npm install hexo-asset-<span class="hljs-selector-tag">image</span> <span class="hljs-attr">--save</span>（不好用）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
